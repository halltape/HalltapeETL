x-airflow-common: &airflow-common
  build:
    context: ./airflow_dockerfile
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.auth.managers.fallback_auth_manager.FallbackAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
  volumes:
    - ./data_lake:/opt/data_lake
    - ./data_lake/monitoring:/opt/data_lake/monitoring
    - ./synthetic_data:/opt/synthetic_data
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./scripts:/opt/airflow/scripts
    - ./dbt_click:/opt/dbt_click
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
  networks:
    - all_in_one

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    command: >
      postgres -c wal_level=logical
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - all_in_one

  # clickhouse:
  #   image: yandex/clickhouse-server:latest
  #   environment:
  #     CLICKHOUSE_USER: admin
  #     CLICKHOUSE_PASSWORD: admin
  #   ports:
  #     - "8123:8123"
  #     - "9000:9000"
  #   volumes:
  #     - ./clickhouse:/var/lib/clickhouse
  #     - ./data_lake:/opt/data_lake
  #     - ./docker_related_config.xml:/etc/clickhouse-server/config.d/docker_related_config.xml
  #   networks:
  #     - all_in_one

  af-webserver:
    <<: *airflow-common
    container_name: af-webserver
    command: webserver
    ports:
      - "8080:8080"
    restart: always

  af-scheduler:
    <<: *airflow-common
    container_name: af-scheduler
    command: scheduler
    restart: always

  af-worker:
    <<: *airflow-common
    container_name: af-worker
    command: worker
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''


  # superset:
  #   container_name: superset
  #   build:
  #     context: ./superset_dockerfile
  #     dockerfile: Dockerfile
  #   environment:
  #     - ADMIN_USERNAME=admin
  #     - ADMIN_EMAIL=admin@superset.com
  #     - ADMIN_PASSWORD=admin
  #   volumes:
  #     - ./superset_data:/app/superset_home
  #   ports: 
  #     - '8088:8088'
  #   depends_on:
  #     - postgres
  #   networks:
  #     - all_in_one

  # jupyter:
  #   container_name: jupyter_notebook
  #   build:
  #     context: ./jupyter_dockerfile
  #     dockerfile: Dockerfile
  #   ports:
  #     - "10000:8888"
  #     - "4040:4040"
  #   volumes:
  #     - ./synthetic_data:/home/jovyan/source
  #     - ./data_lake:/home/jovyan/data_lake
  #     - ./jupyter_notebook:/home/jovyan
  #   command: jupyter notebook --no-browser --NotebookApp.token='' --NotebookApp.password='' --ip='*' --allow-root
  #   environment:
  #     - GRANT_SUDO=yes
  #   user: root
  #   restart: always
  #   networks:
  #     - all_in_one

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.4.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - '2181:2181'
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   healthcheck:
  #     test: echo srvr | nc zookeeper 2181 || exit 1
  #     start_period: 10s
  #     retries: 20
  #     interval: 10s
  #   networks:
  #     all_in_one:

  # broker:
  #   image: confluentinc/cp-kafka:7.4.0
  #   hostname: broker
  #   container_name: broker
  #   ports:
  #     - '29092:29092'
  #     - '9092:9092'
  #     - '9101:9101'
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #     KAFKA_JMX_PORT: 9101
  #     KAFKA_JMX_HOSTNAME: localhost
  #   healthcheck:
  #     test: nc -z localhost 9092 || exit -1
  #     start_period: 15s
  #     interval: 5s
  #     timeout: 10s
  #     retries: 10
  #   networks:
  #     all_in_one:

  # control-center:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #   depends_on:
  #     - broker
  #     - zookeeper
  #   networks:
  #     - all_in_one

  # debezium:
  #   image: debezium/connect:3.0.0.Final
  #   container_name: debezium
  #   hostname: debezium
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     broker:
  #       condition: service_healthy
  #   ports:
  #     - '8093:8083'
  #   environment:
  #     BOOTSTRAP_SERVERS: broker:29092
  #     CONNECT_REST_ADVERTISED_HOST_NAME: debezium
  #     GROUP_ID: 1
  #     CONFIG_STORAGE_TOPIC: connect_configs
  #     STATUS_STORAGE_TOPIC: connect_statuses
  #     OFFSET_STORAGE_TOPIC: connect_offsets
  #     KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     ENABLE_DEBEZIUM_SCRIPTING: 'true'
  #   healthcheck:
  #     test:
  #       [ 'CMD', 'curl', '--silent', '--fail', '-X', 'GET', 'http://localhost:8083/connectors', ]
  #     start_period: 10s
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     all_in_one:

  # debezium-ui:
  #   image: debezium/debezium-ui:2.1.2.Final
  #   container_name: debezium-ui
  #   hostname: debezium-ui
  #   depends_on:
  #     debezium:
  #       condition: service_healthy
  #   ports:
  #     - '8081:8081'
  #   environment:
  #     KAFKA_CONNECT_URIS: http://debezium:8083
  #   networks:
  #     all_in_one:


volumes:
  postgres-db-volume:
  clickhouse:

networks:
  all_in_one: